%do some cleaningclear all;close all;%add packagesaddpath('./signal');addpath('./channel');addpath('./estimation');%initializationParameters;disp(SIMULATION);NDrops = SIMULATION.NDrops;NSubframes = SIMULATION.NSubframes;wichOFDMSymbol = SIMULATION.wichOFDMSymbol;whichAPUsed =  SIMULATION.whichAPUsed;OFDMId = SIMULATION.wichOFDMSymbol;%constant calculationsSCLength = SYSTEM.totalRB_PRS * 2;NSamples = NSubframes * length( wichOFDMSymbol) * length( whichAPUsed);if SIMULATION.withCP   sOFDMLength = SYSTEM.FFTsize + SYSTEM.CP1;else  sOFDMLength = SYSTEM.FFTsize;end%transmitter%resource allocationif exist('data.mat','file') == 0  disp('Data generating...');  sOFDMAll = cell(1, NDrops);  rOFDMAll = cell(1, NDrops);  sSCAll = cell(1, NDrops);  rSCAll = cell(1, NDrops);  SCAll = cell(1, NDrops);  %transmitter and channel  for drop = 1: NDrops    %a drop    cnt= 1;    %resource allocation    sOFDMAll{drop} = zeros(sOFDMLength, NSubframes);    rOFDMAll{drop} = zeros(sOFDMLength, NSubframes);    sSCAll{drop} = zeros(sSCLength, NSubframes);    rSCAll{drop} = zeros(sSCLength, NSubframes);    SCAll{drop} = zeros(sSCLength, NSubframes);    for id = 0 : NSubframes-1   %a subframe      st = GenerateSubframe(SYSTEM, id);      rt = Channel_main(SYSTEM, CHANNEL, st);      for ofdm = wichOFDMSymbol   %a symbol        for ap = whichAPUsed    %an ap          [ sSCAll{drop}(:, cnt), SCAll{drop}(:, cnt)] = GetSCSymbol( SYSTEM, st, id, ofdm, ap );          rSCAll{drop}(:, cnt) = GetSCSymbol( SYSTEM, rt, id, ofdm, ap );          % % A validation line, supposed to be 0 if without noise          %max( abs( rSCAll{drop}(:, cnt) - sSCAll{drop}(:, cnt) .* exp(-j * 2 * pi / 1024 * 10 * (SCAll{drop}(:, cnt)-1)) ) )          sOFDMAll{drop}(:, cnt) = GetOFDMSymbol( SYSTEM, st, ofdm, ap, false );          rOFDMAll{drop}(:, cnt) = GetOFDMSymbol( SYSTEM, rt, ofdm, ap, false );          cnt = cnt + 1;        end % end ap      end  %end ofdm    end   %end subframes  end %end drop  disp('Data saving...');  save('data.mat', 'sOFDMAll', 'rOFDMAll', 'sSCAll', 'rSCAll', 'SCAll');  disp('Data saved.');else   disp('Data loading...');  load('data.mat');  disp('Data loaded.');end%receiver%resource allocationToA_TC_1Sample = zeros(1, NDrops);ToA_SFC_1Sample = zeros(1, NDrops);ToA_TC_MSamples_LastMean = zeros(1, NDrops);ToA_MdlMusic_MSamples = zeros(1, NDrops);D_MdlMusic_MSamples = zeros(1, NDrops);ToA_MLM_MSamples = zeros(1, NDrops);D_MLM_MSamples = zeros(1, NDrops);disp('Results generating...');for drop = 1: NDrops    %a drop  ToA_TC_1Sample(drop) = ...          TC_AWGN_1Sample (SYSTEM, ESTIMATION, sOFDMAll{drop}(:, 1), rOFDMAll{drop}(:, 1));  ToA_SFC_1Sample(drop) = ...          SFC_1Sample(SYSTEM, ESTIMATION, sSCAll{drop}(:, 1), rSCAll{drop}(:, 1), SCAll{drop}(:, 1));  ToA_TC_MSamples_LastMean(drop) = ...          TC_Thrs_MSamples_LastMean( SYSTEM, ESTIMATION, sOFDMAll{drop}, rOFDMAll{drop});  [ToA_MdlMusic_MSamples(drop),  D_MdlMusic_MSamples(drop) ] = ...          MdlMusic_MSamples( SYSTEM, ESTIMATION, sSCAll{drop}, rSCAll{drop}, SCAll{drop});  [ToA_MLM_MSamples(drop),  D_MLM_MSamples(drop) ] = ...          MusicLSMmdl_MSamples( SYSTEM, ESTIMATION, sSCAll{drop}, rSCAll{drop}, SCAll{drop});end %end dropdisp('Results generated.');disp('Results saving...');%save('result.mat', 'SYSTEM', 'ESTIMATION', 'CHANNEL', ... %        'ToA_TC_1Sample', ...%        'ToA_TC_MSamples_LastMean', ...%        'ToA_MdlMusic_MSamples', 'D_MdlMusic_MSamples',...%        'ToA_MLM_MSamples', 'D_MLM_MSamples');disp('Results saved.');disp('Done');